/* 
  Task 103: Sort a list of strings using a custom sorting order
  This file demonstrates how to sort a list of strings based on a custom alphabetical order.
  - A default order of letters from 'a' to 'z' is defined.
  - The `_str-compare` function compares two strings to determine their relative order.
  - The `quick-sort` function recursively sorts a list using the `_str-compare` function.
  - The sorted list is then output using `@debug`.
*/

@import '103-sort_list'; // Import the list of strings to sort

$default-order: 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p'
  'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' !default; // Default alphabetical order

// Compare two strings to check their order based on the custom alphabetical order
@function _str-compare($a, $b, $order) {
  @if type-of($a) == 'number' and type-of($b) == 'number' {
    @return $a < $b; // For numbers, compare directly
  }

  // Convert both strings to lowercase for case-insensitive comparison
  $a: to-lower-case($a + unquote(''));
  $b: to-lower-case($b + unquote(''));

  // Compare character by character
  @for $i from 1 through min(str-length($a), str-length($b)) {
    $char-a: str-slice($a, $i, $i);
    $char-b: str-slice($b, $i, $i);

    // If characters differ, return the comparison result based on the custom order
    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b)
    {
      @return index($order, $char-a) < index($order, $char-b);
    }
  }

  // If strings are the same up to the length of the shortest one, the shorter string comes first
  @return str-length($a) < str-length($b);
}

// Quick-sort function to sort a list of strings based on the custom order
@function quick-sort($list, $order: $default-order) {
  $less: (); // List of items smaller than the pivot
  $equal: (); // List of items equal to the pivot
  $large: (); // List of items larger than the pivot

  // If the list has more than one element, apply the sorting
  @if length($list) > 1 {
    $seed: nth($list, ceil(length($list) / 2)); // Choose a pivot

    @each $item in $list {
      @if $item == $seed {
        $equal: append(
          $equal,
          $item,
          list-separator($list)
        ); // Equal items go into the equal list
      } @else if _str-compare($item, $seed, $order) {
        $less: append(
          $less,
          $item,
          list-separator($list)
        ); // Items smaller than the pivot
      } @else if not _str-compare($item, $seed, $order) {
        $large: append(
          $large,
          $item,
          list-separator($list)
        ); // Items larger than the pivot
      }
    }

    // Recursively sort the lists and join them together
    @return join(
      join(quick-sort($less, $order), $equal),
      quick-sort($large, $order)
    );
  }

  // Return the list as-is if it contains one or fewer elements
  @return $list;
}

// Output the sorted list to the debug log
@debug quick-sort(
  $list_to_sort
); // This will print the sorted list to the debug output
