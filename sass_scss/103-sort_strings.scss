/**/
@use 'sass:string';
@use 'sass:list';
@use '103-sort_list' as *; // Import the list of strings to sort

$sort-order: a b c d e f g h i j k l m n o p q r s t u v w x y z !default;

@function compare($string1, $string2, $sort-order) {
  $string1: str-to-lower-case($string1);
  $string2: str-to-lower-case($string2);

  @for $i from 1 through min(string.length($string1), string.length($string2)) {
    $char1: string.slice($string1, $i, $i);
    $char2: string.slice($string2, $i, $i);

    @if $char1 and
      $char2 and
      list.index($sort-order, $char1) !=
      list.index($sort-order, $char2)
    {
      @return list.index($sort-order, $char1) < list.index($sort-order, $char2);
    }
  }

  @return string.length($string1) < string.length($string2);
}

@function swap($list, $index1, $index2) {
  @if abs($index1) > list.length($list) or abs($index2) > list.length($list) {
    @return $list;
  }

  $temp: list.nth($list, $index1);
  $list: list.set-nth(
    $list,
    $index1,
    list.nth($list, $index2)
  ); // Replace $index1 with $index2
  $list: list.set-nth(
    $list,
    $index2,
    $temp
  ); // Replace $index2 with the temp value
  @return $list;
}

@function sort($list, $sort-order) {
  @for $i from 1 through list.length($list) {
    // Traverse the list backward, comparing adjacent elements
    @for $j from $i * -1 through -1 {
      $j: abs($j); // Convert negative indices to positive
      @if $j >
        1 and
        compare(list.nth($list, $j), list.nth($list, $j - 1), $sort-order)
      {
        $list: swap($list, $j, $j - 1);
      }
    }
  }
  @return $list; // Return the sorted list
}

// Debug the sorted result for a given list
@debug sort($list-to-sort, $sort-order);
