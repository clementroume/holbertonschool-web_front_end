/* 
  Task 103: Sort a list of strings based on a custom alphabetical order
  This file sorts a list of strings using the custom order defined in `$default-order`.
  The `quick-sort` function is used to perform the sorting.
*/

@import '103-sort_list'; // Import the list to sort

$default-order: 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p'
  'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' !default;

// Function to compare two strings based on custom alphabetical order
@function _str-compare($a, $b, $order) {
  $a: to-lower-case($a);
  $b: to-lower-case($b);

  // Compare character by character using the custom order
  @for $i from 1 through min(str-length($a), str-length($b)) {
    $char-a: str-slice($a, $i, $i);
    $char-b: str-slice($b, $i, $i);
    @if index($order, $char-a) != index($order, $char-b) {
      @return index($order, $char-a) < index($order, $char-b);
    }
  }
  // If characters are the same, shorter string comes first
  @return str-length($a) < str-length($b);
}

// Quick-sort function to sort the list
@function quick-sort($list, $order: $default-order) {
  @if length($list) <= 1 {
    @return $list;
  }

  $pivot: nth($list, ceil(length($list) / 2));
  $less: ();
  $equal: ();
  $greater: ();

  @each $item in $list {
    @if _str-compare($item, $pivot, $order) {
      $less: append($less, $item);
    } @else if $item == $pivot {
      $equal: append($equal, $item);
    } @else {
      $greater: append($greater, $item);
    }
  }

  // Recursively sort and combine the lists
  @return join(
    join(quick-sort($less, $order), $equal),
    quick-sort($greater, $order)
  );
}

// Output the sorted list to the debug log
@debug quick-sort($list_to_sort);
