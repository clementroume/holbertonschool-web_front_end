/* Task 103: Sort a list of strings using a custom sorting order*/

@import '103-sort_list'; // Import the list of strings to sort

$sort-order: a b c d e f g h i j k l m n o p q r s t u v w x y z !default;

@function compare($string1, $string2, $sort-order) {
  // Normalize strings to lowercase for case-insensitive comparison
  $string1: to-lower-case($string1 + unquote(''));
  $string2: to-lower-case($string2 + unquote(''));

  @for $i from 1 through min(str-length($string1), str-length($string2)) {
    $char1: str-slice($string1, $i, $i);
    $char2: str-slice($string2, $i, $i);

    @if $char1 and
      $char2 and
      index($sort-order, $char1) !=
      index($sort-order, $char2)
    {
      @return index($sort-order, $char1) < index($sort-order, $char2);
    }
  }

  // If strings are identical up to the shorter one's length, compare lengths
  @return str-length($string1) < str-length($string2);
}

// Function: Swap two elements in a list
@function swap($list, $index1, $index2) {
  // Ensure indices are within bounds
  @if abs($index1) > length($list) or abs($index2) > length($list) {
    @return $list;
  }

  // Swap elements at $index1 and $index2
  $temp: nth($list, $index1); // Temporarily store the value at $index1
  $list: set-nth(
    $list,
    $index1,
    nth($list, $index2)
  ); // Replace $index1 with $index2
  $list: set-nth($list, $index2, $temp); // Replace $index2 with the temp value
  @return $list;
}

// Function: Sort a list using a bubble sort algorithm
@function sort($list, $sort-order) {
  // Loop through each element in the list
  @for $i from 1 through length($list) {
    // Traverse the list backward, comparing adjacent elements
    @for $j from $i * -1 through -1 {
      $j: abs($j); // Convert negative indices to positive
      // Compare adjacent elements and swap if they are out of order
      @if $j > 1 and compare(nth($list, $j), nth($list, $j - 1), $sort-order) {
        $list: swap($list, $j, $j - 1);
      }
    }
  }
  @return $list; // Return the sorted list
}

// Debug the sorted result for a given list
@debug sort($list_to_sort, $sort-order);
